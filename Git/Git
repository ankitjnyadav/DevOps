SCM
(Eg is Github)
uploading --> push
downloading --> pull

Version Control System (VCS)

Github has Single Point of failure, it is CVCS, Centralized.
Git is VCS,it is DVCS, De-Centralised.

Workspace is folder containing variety of folders and files
Whereas, Repository is folder containing  variety of folders and files along with Version Control.

$git clone <url>
It will the download the code from the GitHub or CVCS.

$git log <filename>
---------------------------------------------
ay@Neelkanth:~/PycharmProjects/DevOps$ git log
commit 9571af0bdf427c331fdc54575475d0c81bce8812 (HEAD -> master)
Author: Ankit Yadav <reach.ankitjnyadav@gmail.com>
Date:   Tue Apr 28 20:56:42 2020 +0530

    Hello DevOps World!
----------------------------------------------

$git status
Give the status of current status of the repository.
What are the changes, addition, modification or deletiong in the repository.

$git status -s
----------------------------------------------
ay@Neelkanth:~/PycharmProjects/DevOps$ git status -s
AM Git/Git
?? .idea/vcs.xml
----------------------------------------------

Working Area
Staging Area
Commit Area


$git add <filename>
$git commit -m <message>

GitHub becomes origin

$git push

HEAD points to the current version
origin/master points to version of data GitHub has.


First, Add
Then, Commit
Finally, Push

To rollback
$git reset HEAD <commit_SHA_value> <filename>
$git checkout -- <filename>

---------------Day2--------------------

$git init
to initialize/create a local repository


$git status -s
-s, --short <--> show status concisely

ay@Neelkanth:~/PycharmProjects/DevOps$ git status -s
 M Git/Git

M --> signifies that file is modified.

$ git status -s
 M Git/Git
?? new.html

?? -> untracked file

$ git add .
$ git status -s
M  Git/Git
A  new.html

A -> Newly added

$git commit <filename> -m <comment>

First time setup, its imp as its the identity who is commit.
$ git config --global user.name "someone"
$ git config --global user.email "someone@someplace.com"


git remote add <remote_name> <CVCS_url>
------------------------------------------------------------------
How to create a track between local and remote
------------------------------------------------------------------
$ ay@Neelkanth:~/PycharmProjects/DevOps$ git push --set-upstream origin master
Username for 'https://github.com': username@email.com
Password for 'username@github.com': github_password
Counting objects: 15, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (11/11), done.
Writing objects: 100% (15/15), 2.28 KiB | 1.14 MiB/s, done.
Total 15 (delta 1), reused 0 (delta 0)
remote: Resolving deltas: 100% (1/1), done.
To https://github.com/ankitjnyadav/DevOps.git
 * [new branch]      master -> master
Branch 'master' set up to track remote branch 'master' from 'origin'.
$ ay@Neelkanth:~/PycharmProjects/DevOps$
------------------------------------------------------------------
$ ay@Neelkanth:~/PycharmProjects/DevOps$ git remote show origin
* remote origin
  Fetch URL: https://github.com/ankitjnyadav/DevOps.git
  Push  URL: https://github.com/ankitjnyadav/DevOps.git
  HEAD branch: master
  Remote branch:
    master tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)
------------------------------------------------------------------

---------------Day3--------------------

Hooks
-----


$ ay@Neelkanth:~/PycharmProjects/DevOps/.git$ ls -a
.  ..  branches  COMMIT_EDITMSG  config  description  HEAD  hooks  index  info  logs  objects  ORIG_HEAD  refs
$ ay@Neelkanth:~/PycharmProjects/DevOps/.git$ cd hooks/
$ ay@Neelkanth:~/PycharmProjects/DevOps/.git/hooks$ ls
applypatch-msg.sample      post-update.sample     prepare-commit-msg.sample  pre-receive.sample
commit-msg.sample          pre-applypatch.sample  pre-push.sample            update.sample
fsmonitor-watchman.sample  pre-commit.sample      pre-rebase.sample

- Run Hooks(program/script) on specified 'Trigger' points.


---------------Day4--------------------
Git Fetch



----------------------- Day8 (Day5 ~ 7) -----------------------

Git Branch

$ gitk
---------------
> Commit Area
> Delta part / Differential part
> Snapshot vs Backup
---------------
$ git log --oneline
$ git show <commitID>
$ git diff <commitID_1> <commitID_2>
$ git diff HEAD <commitID_2>
---------------
$ git branch -a  [To see all the branches]
---------------
$ git log --oneline --graph
ay@Neelkanth:~/PycharmProjects/DevOps$ git log --oneline --graph
* ee52f23 (HEAD -> master, origin/master) Job Chaining
* b29f920 Job Chaining
* cc244c8 Docker Integration with Jenkins
* 523576d Jenkins sudo capabilities
* 4444cc7 Updating Footer
* 19b7d43 Web-Hooks
*   1b03e97 Day4
|\
| * edd6ec9 git fetch overview
* | d2e5620 SHA
* | e2495d6 Hooks
* | ca844e0 Hooks
|/
* fbb1661 Types of Build Triggers
* 57b37fc How to convert Private IP to Public IP
* 054d9bb Introduction to Jenkins
* 9571af0 Hello DevOps World!
---------------
$ git merge <branch_to_be_merged>
This is fast - forward merge

Eg. Dev1 has 3 additional commits
i.e. Master is behind these 3 commits
When you are on master branch
$ git merge dev1 --> This will merge 3 commits to master

---------------
> Git push -- per branch / branch specific
---------------
To check local branches
$ ay@Neelkanth:~/PycharmProjects/DevOps$ git branch
* master

---------------
To check all local branches (local + remote)
$ ay@Neelkanth:~/PycharmProjects/DevOps$ git branch -a
* master
  remotes/origin/master
---------------
git checkout -b dev2
change the branch and if branch doesn't exist create branch dev2
---------------

$ git push -all


Lets say you are on branch dev2
and you are not able to work due to some reasons
and master branch has now some changes and you dont have anything on your plate
so you can rebase your branch with master branch
so,

$ git rebase master
[Provided you are on your branch (dev2)]

------ Working on Project -----

Creating new branch on GitHub


------------ Day10 --------------

$ git merge <from_which_branch>
$ git merge dev1   [Consider we are on the master branch]
---------------------------------
ay@Neelkanth:~/PycharmProjects/DevOps$ git merge dev1
Updating 77560df..3f9145e
Fast-forward
 Git/Git         |  6 +++++-
 Jenkins/Jenkins | 26 ++++++++++++++++++++++++++
 index.php       |  3 +++
 3 files changed, 34 insertions(+), 1 deletion(-)
 create mode 100644 index.php
--------------------------------
ay@Neelkanth:~/PycharmProjects/DevOps$ git log --oneline
3f9145e (HEAD -> master, origin/master, origin/dev1, dev1) Delivery/Build Pipeline
2c4708e New Branch
a90b51a Creating branch
--------------------------------

> When we merge, history from dev1 branch is also attached to master branch.

merge with squash

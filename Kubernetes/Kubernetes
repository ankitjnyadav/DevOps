https://kubernetes.io/docs/tasks/tools/install-minikube/#install-minikube-using-a-package

minikube start --driver=<driver_name>
minikube start --driver=virtualbox

Commands Used in the Day
--------------------------------------------------
 kubectl get pods
 kubectl -h
 kubectl run myweb --image=centos
 kubectl get pods
 kubectl run myweb --image=ankitjnyadav/webserver
 kubectl run ayweb --image=ankitjnyadav/webserver
 kubectl delete pods myweb
 kubectl get pods
 kubectl create deployment myweb1 --imagevimal13/apache-webserver-php
 kubectl create deployment myweb1 --image=vimal13/apache-webserver-php
 kubectl get pods
 kubectl get deployment
 kubectl get pods
 kubectl get deployment
 kubectl describe pods
 kubectl describe pods | grep IP
 kubectl expose deployment myweb1 --port 80 --type=Node
 kubectl expose deployment myweb1 --port 80 --type=NodePort
 kubectl service myweb1 --url
 minikube service myweb1 --url
 kubectl get pods
 kubectl delete pods myweb1-6dcc8c6fb4-8nhhw
 kubectl get pods
 kubectl delete pods ayweb
 kubectl scale deployment myweb1 --replicas=3
 kubectl get pods
 kubectl get deployment
 kubectl get pods
 kubectl get all
--------------------------------------------------

1998  kubectl delete all --all
 1999  kubectl create deployment myweb --image=vimal13/apache-webserver-php
 2000  kubectl get deployments
 2001  kubectl get deployment
 2002  kubectl get dc
 2003  kubectl exec myweb
 2004  kubectl exec myweb bash
 2005  kubectl exec -it myweb bash
 2006  kubectl get pods
 2007  kubectl exec -it myweb-6bffb6b45c-hpc5g bash
 2008  kubectl set env deployment myweb --env=x=10
 2009  kubectl get pods
 2010  kubectl exec -it myweb-79d79ccd54-8xlxj bash
 2011  kubectl create deployment mydb --image=mysql:5.7
 2012  get deployments
 2013  k8s get deployments
 2014  kubectl get deployments
 2015  kubectl get pods
 2016* kubectl
 2017  kubectl set
 2018  kubectl set env
 2019  kubectl set env -h
 2020  kubectl set env deployments mydb --env=MYSQL_ROOT_PASSWORD=redhat --env=MYSQL_USER=ay --env=MYSQL_PASSWORD=redhat --env=MYSQL_DATABASE=db
 2021  kubectl get pods
 2022  kubectl get deployments
 2023  kubectl get pods
 2024  kubectl get deployments
 2025  kubectl set env deployments mydb --env=MYSQL_ROOT_PASSWORD=redhat --env=MYSQL_USER=ay --env=MYSQL_PASSWORD=redhat --env=MYSQL_DATABASE=db
 2026  kubectl get deployments
 2027  kubectl get pods
 2028  kubectl describe pods mydb-7b4fb75947-tcnqc
 2029  set
 2030  set | grep ay
 2031  kubectl create deployment mydb --image=mysql:5.7
 2032  kubectl create deployment mydb1 --image=mysql:5.7
 2033  kubectl create deployment mydb1 --image=mysql
 2034  kubectl set env deployments mydb1 --env=MYSQL_ROOT_PASSWORD=redhat --env=MYSQL_USER=ay --env=MYSQL_PASSWORD=redhat --env=MYSQL_DATABASE=db
 2035  kubectl get pods
 2036  kubectl set env deployment mydb1 --env=MYSQL_ROOT_PASSWORD=redhat --env=MYSQL_USER=ay --env=MYSQL_PASSWORD=redhat --env=MYSQL_DATABASE=db
 2037  kubectl create deployment mydb1 --image=mysql:5.7
 2038  kubectl set env deployment mydb1 --env=MYSQL_ROOT_PASSWORD=redhat --env=MYSQL_USER=ay --env=MYSQL_PASSWORD=redhat --env=MYSQL_DATABASE=db
 2039  kubectl create deployment mywp --image=wordpress:php7.3-apache
 2040  kubectl create deployment mydb --image=mysql:5.7
 2041  kubectl set env deployment mydb --env=MYSQL_ROOT_PASSWORD=redhat --env=MYSQL_USER=ay --env=MYSQL_PASSWORD=redhat --env=MYSQL_DATABASE=db
 2042  kubectl get pods
 2043  kubectl expose deployments mywp --port=80 --type=NodePort
 2044  minikube service mywp --url
 2045  kubectl get pods
 2046  history
--------------------------------------------------
The Manifest File

POD not is Container
POD is the atomic unit of Kubernetes
POD contains container which it manages
POD is a box (containing the container)


adhoc commands / CLI - kubectl commands
SerDe --  Serailization-Deserialization
DSL - Domain Specific Languange
Declarative Lang/Approach -> JSON, Yaml


pod1.yml
#kubectl run myweb_pod --image=httpd
apiVersion: v1
kind: Pod       #Type of Resource.. Name starts with Capital
metadata:
  name: myweb-pod

spec:           #Specification of the Pod Can contain multiple container or single container pod
  container:
  - name: myweb-con
    image: httpd


ay@Neelkanth:~/PycharmProjects/DevOps/Kubernetes$ kubectl expose pods myweb-pod --port=80 --type=NodePort
error: couldn't retrieve selectors via --selector flag or introspection: the pod has no labels and cannot be exposed
-------------------------------------------------------
(base) ay@Neelkanth:~/PycharmProjects/DevOps/Kubernetes$ kubectl create -f pod1.yml
pod/myweb-pod created
(base) ay@Neelkanth:~/PycharmProjects/DevOps/Kubernetes$ kubectl delete -f pod1.yml
pod "myweb-pod" deleted
(base) ay@Neelkanth:~/PycharmProjects/DevOps/Kubernetes$ gedit pod1.yml
(base) ay@Neelkanth:~/PycharmProjects/DevOps/Kubernetes$ kubectl create -f pod1.yml
pod/myweb-pod created
(base) ay@Neelkanth:~/PycharmProjects/DevOps/Kubernetes$ kubectl describe pod web-pod
Error from server (NotFound): pods "web-pod" not found
(base) ay@Neelkanth:~/PycharmProjects/DevOps/Kubernetes$ kubectl describe pod myweb-pod
Name:         myweb-pod
Namespace:    default
Priority:     0
Node:         minikube/192.168.99.100
Start Time:   Fri, 15 May 2020 22:28:22 +0530
Labels:       country=IN
              dc=2
              name=myweb
Annotations:  <none>
Status:       Running
IP:           172.17.0.4
IPs:
  IP:  172.17.0.4
Containers:
  myweb-con:
    Container ID:   docker://0e1fa7fbb3c763883d275e1c7deabb09bf1617a3b390f78ba83adae6cda62171
    Image:          httpd
    Image ID:       docker-pullable://httpd@sha256:1b8cfffba41d8dee09d14d35a7db33461a2189cc27e11c0f1f17857fe582b257
    Port:           <none>
    Host Port:      <none>
    State:          Running
      Started:      Fri, 15 May 2020 22:28:27 +0530
    Ready:          True
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-ktb7h (ro)
Conditions:
  Type              Status
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
Volumes:
  default-token-ktb7h:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-ktb7h
    Optional:    false
QoS Class:       BestEffort
Node-Selectors:  <none>
Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s
                 node.kubernetes.io/unreachable:NoExecute for 300s
Events:
  Type    Reason     Age   From               Message
  ----    ------     ----  ----               -------
  Normal  Scheduled  20s   default-scheduler  Successfully assigned default/myweb-pod to minikube
  Normal  Pulling    20s   kubelet, minikube  Pulling image "httpd"
  Normal  Pulled     15s   kubelet, minikube  Successfully pulled image "httpd"
  Normal  Created    15s   kubelet, minikube  Created container myweb-con
  Normal  Started    15s   kubelet, minikube  Started container myweb-con
(base) ay@Neelkanth:~/PycharmProjects/DevOps/Kubernetes$ kubectl describe pod myweb-pod | grep Labels
Labels:       country=IN
(base) ay@Neelkanth:~/PycharmProjects/DevOps/Kubernetes$ kubectl get pods -l country=IN
NAME        READY   STATUS    RESTARTS   AGE
myweb-pod   1/1     Running   0          69s
-------------------------------------------------------------
ay@Neelkanth:~/PycharmProjects/DevOps/Kubernetes$ kubectl describe service myweb-pod
Name:                     myweb-pod
Namespace:                default
Labels:                   country=IN
                          dc=2
                          name=myweb
Annotations:              <none>
=====================================================
Selector:                 country=IN,dc=2,name=myweb | Based on this they exposed the port
=====================================================
Type:                     NodePort
IP:                       10.111.151.0
Port:                     <unset>  80/TCP
TargetPort:               80/TCP
NodePort:                 <unset>  31610/TCP
Endpoints:                172.17.0.4:80
Session Affinity:         None
External Traffic Policy:  Cluster
Events:                   <none>
(base) ay@Neelkanth:~/PycharmProjects/DevOps/Kubernetes$
-------------------------------------------------------------

Replication Controller ->
Keep montoring the pod and if it fails/down then initiate new

Diff between scale up/down & scale out/in

RC vs RS (Replica Set)
----------------------
RC - Equality Based selection i.e. == !=
RS - Set/rule based selector

-------------------------------------------------------------

Deployment
Update Strategy
- Recreate
- Ramped  *Mostly Used* Also known as rolling update strategies
- Blue/green
- A/B Testing
- Canary

-------------------------------------------------------------

Storage in Containers
1. Ephemeral storage - Eg. Like C: , if crashes we loose our date
2. Persistent storage - Eg. Like Pendrive

Persistant Volume (Claim) - PVC

-------------------------------------------------------------

Kubelet - duty is to take the requirment from master and contact the Container Enginer like Docker.
If Kubelet is down, node gets disconnected from master.


Secret data is stored in ECD

Service [is name of Program] - Kubernetes does Kube Proxy and Load Balancing.

Three different Types of Service:
1. NodePort -> IP provided can be accessed by outside world
2. LoadBalancer
3. ClusterIP -> IP provided is isolated, cannot be accessed by outside world
--
4. ExternalName